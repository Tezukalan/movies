{"version":3,"sources":["components/MoviesList/MoviesList.js","components/ListHeader/ListHeader.js","pages/MoviesList/MoviesListPage.js","App.constants.js","utils/axios.js"],"names":["MoviesList","props","movies","history","useHistory","className","GridList","cellHeight","spacing","cols","map","movie","imgSrc","poster_path","IMAGE_BASE_URL","POSTER_SIZE","DEFAULT_IMAGE_BASE_URL","votes","vote_count","subTitleTemplate","Rating","value","vote_average","precision","emptyIcon","fontSize","readOnly","GridListTile","key","id","classes","tile","imgFullHeight","onClick","push","src","alt","title","GridListTileBar","subtitle","ListHeader","sortCriterion","onSelectChange","useState","state","setState","sortTemplate","FormControl","variant","InputLabel","htmlFor","Select","native","onChange","event","target","label","inputProps","name","data-testid","AppBar","color","position","Toolbar","Typography","MoviesListPage","totalPages","sortRef","useRef","current","sort","setSortState","loadingRef","loading","setLoadingState","setLoading","nextPageRef","nextPage","setNextPageState","setNextPage","useReducer","prevMovies","action","type","newMovies","concat","dispatchMovies","getMovies","url","MOVIES_LIST_URL","API_KEY","axios","get","then","res","data","total_pages","results","catch","handleScroll","document","documentElement","offsetHeight","scrollTop","window","innerHeight","useEffect","addEventListener","removeEventListener","setSort","CircularProgress","BASE_URL","BACKDROP_SIZE","DETAIL_POSTER_SIZE","MOVIE_URL","axiosInstance","create","baseURL"],"mappings":"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","file":"static/js/5.0b8a7966.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport Rating from '@material-ui/lab/Rating';\nimport { useHistory } from 'react-router-dom';\n\nimport { IMAGE_BASE_URL, POSTER_SIZE, DEFAULT_IMAGE_BASE_URL } from '../../App.constants';\nimport './MoviesList.css';\n\nconst MoviesList = (props) => {\n  const { movies } = props;\n  const history = useHistory();\n  const handleClick = (id) => {\n    history.push(`/movie/${id}`);\n  };\n\n  return (\n    <div className=\"grid\">\n      <GridList cellHeight=\"auto\" spacing={10} cols={4} className=\"grid-list\">\n        {movies.map((movie) => {\n          const imgSrc = movie.poster_path\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n            : `${DEFAULT_IMAGE_BASE_URL}${POSTER_SIZE}/defaultPoster.jpg`;\n\n          const votes = `${movie.vote_count} Votes`;\n\n          const subTitleTemplate = (\n            <>\n              <Rating value={movie.vote_average / 2} precision={0.1} emptyIcon={<StarBorderIcon fontSize=\"inherit\" />} readOnly />\n              <span className=\"grid-vote-count\">{votes}</span>\n            </>\n          );\n\n          return (\n            <GridListTile key={movie.id} classes={{ tile: 'grid-tile', imgFullHeight: 'grid-img' }} onClick={() => handleClick(movie.id)}>\n              <img src={imgSrc} alt={movie.title} />\n              <GridListTileBar\n                className=\"grid-tile-bar\"\n                classes={{ title: 'grid-title', subtitle: 'grid-subtitle' }}\n                title={movie.title}\n                subtitle={subTitleTemplate}\n              />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default MoviesList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport './ListHeader.css';\n\nconst ListHeader = (props) => {\n  const { sortCriterion, onSelectChange } = props;\n\n  const [state, setState] = useState({\n    sortCriterion\n  });\n\n  const handleChange = (event) => {\n    setState({\n      sortCriterion: event.target.value\n    });\n\n    onSelectChange(event.target.value);\n  };\n\n  const sortTemplate = (\n    <FormControl variant=\"outlined\">\n      <InputLabel htmlFor=\"sort-label\">Sort by</InputLabel>\n      <Select\n        native\n        value={state.sortCriterion}\n        onChange={handleChange}\n        label=\"Sort by\"\n        className=\"header-sort\"\n        inputProps={{\n          name: 'sort',\n          id: 'sort'\n        }}\n        data-testid=\"sort\"\n      >\n        <option value=\"popularity.desc\">Popularity</option>\n        <option value=\"vote_average.desc\">Vote average</option>\n        <option value=\"vote_count.desc\">Vote count</option>\n        <option value=\"revenue.desc\">Revenue</option>\n        <option value=\"release_date.desc\">Newest release date</option>\n        <option value=\"release_date.asc\">Oldest release date </option>\n        <option value=\"primary_release_date.desc\">Newest primary release date</option>\n        <option value=\"primary_release_date.asc\">Oldest primary release date</option>\n      </Select>\n    </FormControl>\n  );\n\n  return (\n    <AppBar color=\"inherit\" position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h6\">MOVIES</Typography>\n\n        <div className=\"header-input\">{sortTemplate}</div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nListHeader.propTypes = {\n  sortCriterion: PropTypes.string.isRequired,\n  onSelectChange: PropTypes.func.isRequired\n};\n\nexport default ListHeader;\n","import React, { useEffect, useRef, useState, useReducer } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { MOVIES_LIST_URL, API_KEY } from '../../App.constants';\nimport axios from '../../utils/axios';\nimport MoviesList from '../../components/MoviesList/MoviesList';\nimport ListHeader from '../../components/ListHeader/ListHeader';\n\nconst MoviesListPage = () => {\n  let totalPages = 1;\n\n  const sortRef = useRef('popularity.desc');\n  const [sort, setSortState] = useState(sortRef.current);\n  const setSort = (value) => {\n    sortRef.current = value;\n    setSortState(sortRef.current);\n  };\n\n  const loadingRef = useRef(false);\n  const [loading, setLoadingState] = useState(loadingRef.current);\n  const setLoading = (value) => {\n    loadingRef.current = value;\n    setLoadingState(loadingRef.current);\n  };\n\n  const nextPageRef = useRef(1);\n  const [nextPage, setNextPageState] = useState(nextPageRef.current);\n  const setNextPage = (value) => {\n    nextPageRef.current = value;\n    setNextPageState(nextPageRef.current);\n  };\n\n  const updateMovies = (prevMovies, action = { type: 'reset', newMovies: null }) => {\n    if (action.type === 'concat') {\n      return prevMovies.concat(action.newMovies);\n    }\n    return [];\n  };\n  const [movies, dispatchMovies] = useReducer(updateMovies, []);\n\n  const getMovies = () => {\n    const url = `${MOVIES_LIST_URL}?api_key=${API_KEY}&page=${nextPageRef.current}&sort_by=${sortRef.current}`;\n\n    setLoading(true);\n\n    axios\n      .get(url)\n      .then((res) => {\n        setNextPage(nextPageRef.current + 1);\n        totalPages = res.data.total_pages;\n        dispatchMovies({ type: 'concat', newMovies: res.data.results });\n        setLoading(false);\n      })\n      .catch(() => {\n        setNextPage(1);\n        totalPages = 1;\n        dispatchMovies();\n        setLoading(false);\n      });\n  };\n\n  const handleScroll = () => {\n    const bottomDistance = document.documentElement.offsetHeight - document.documentElement.scrollTop - window.innerHeight;\n    const thresdhold = window.innerHeight * 2;\n\n    if (bottomDistance > thresdhold || loadingRef.current || nextPage > totalPages) return;\n\n    getMovies();\n  };\n\n  const initMovies = () => {\n    getMovies();\n\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  };\n\n  useEffect(initMovies, []);\n\n  const handleChange = (value) => {\n    setNextPage(1);\n    setSort(value);\n    dispatchMovies();\n    getMovies();\n  };\n\n  return (\n    <>\n      <ListHeader sortCriterion={sort} onSelectChange={handleChange} />\n      <MoviesList movies={movies} />\n      {loading && (\n        <div className=\"loading\">\n          <CircularProgress />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MoviesListPage;\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\nexport const DEFAULT_IMAGE_BASE_URL = '/assets/images/';\n\nexport const POSTER_SIZE = 'w500';\nexport const BACKDROP_SIZE = 'w1280';\nexport const DETAIL_POSTER_SIZE = 'w92';\n\nexport const MOVIES_LIST_URL = '/discover/movie';\nexport const MOVIE_URL = '/movie/';\n\nexport const API_KEY = '92b418e837b833be308bbfb1fb2aca1e';\n","import axios from 'axios';\nimport { BASE_URL } from '../App.constants';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL\n});\n\nexport default axiosInstance;\n"],"sourceRoot":""}