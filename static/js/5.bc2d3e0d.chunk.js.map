{"version":3,"sources":["components/MoviesList/MoviesList.js","components/ListHeader/ListHeader.js","actions/index.js","pages/MoviesList/MoviesListPage.js","App.constants.js","utils/axios.js"],"names":["MoviesList","props","movies","history","useHistory","id","className","GridList","cellHeight","spacing","cols","map","movie","imgSrc","poster_path","IMAGE_BASE_URL","POSTER_SIZE","DEFAULT_IMAGE_BASE_URL","votes","vote_count","subTitleTemplate","Rating","value","vote_average","precision","emptyIcon","fontSize","readOnly","GridListTile","key","classes","tile","imgFullHeight","onClick","push","src","alt","title","GridListTileBar","subtitle","ListHeader","sortCriterion","onSelectChange","useState","state","setState","sortTemplate","FormControl","variant","InputLabel","htmlFor","Select","native","onChange","event","target","label","inputProps","name","data-testid","AppBar","color","position","Toolbar","Typography","nextPage","reset","type","connect","moviesInfo","totalPages","sort","dispatch","loadingRef","useRef","current","loading","setLoadingState","setLoading","getMovies","next","newSortVal","urlNextPage","urlSort","url","MOVIES_LIST_URL","API_KEY","axios","get","then","res","newMovies","concat","data","results","total_pages","catch","useEffect","length","onScroll","total","document","getElementById","clientHeight","scrollTop","window","innerHeight","val","setSort","CircularProgress","BASE_URL","BACKDROP_SIZE","DETAIL_POSTER_SIZE","MOVIE_URL","axiosInstance","create","baseURL"],"mappings":"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","file":"static/js/5.bc2d3e0d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport Rating from '@material-ui/lab/Rating';\nimport { useHistory } from 'react-router-dom';\n\nimport { IMAGE_BASE_URL, POSTER_SIZE, DEFAULT_IMAGE_BASE_URL } from '../../App.constants';\nimport './MoviesList.css';\n\nconst MoviesList = (props) => {\n  const { movies } = props;\n  const history = useHistory();\n  const handleClick = (id) => {\n    history.push(`/movie/${id}`);\n  };\n\n  return (\n    <div id=\"list\" className=\"grid\">\n      <GridList cellHeight=\"auto\" spacing={10} cols={4} className=\"grid-list\">\n        {movies.map((movie) => {\n          const imgSrc = movie.poster_path\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n            : `${DEFAULT_IMAGE_BASE_URL}${POSTER_SIZE}/defaultPoster.jpg`;\n\n          const votes = `${movie.vote_count} Votes`;\n\n          const subTitleTemplate = (\n            <>\n              <Rating value={movie.vote_average / 2} precision={0.1} emptyIcon={<StarBorderIcon fontSize=\"inherit\" />} readOnly />\n              <span className=\"grid-vote-count\">{votes}</span>\n            </>\n          );\n\n          return (\n            <GridListTile key={movie.id} classes={{ tile: 'grid-tile', imgFullHeight: 'grid-img' }} onClick={() => handleClick(movie.id)}>\n              <img src={imgSrc} alt={movie.title} />\n              <GridListTileBar\n                className=\"grid-tile-bar\"\n                classes={{ title: 'grid-title', subtitle: 'grid-subtitle' }}\n                title={movie.title}\n                subtitle={subTitleTemplate}\n              />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default MoviesList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport './ListHeader.css';\n\nconst ListHeader = (props) => {\n  const { sortCriterion, onSelectChange } = props;\n\n  const [state, setState] = useState({\n    sortCriterion\n  });\n\n  const handleChange = (event) => {\n    setState({\n      sortCriterion: event.target.value\n    });\n\n    onSelectChange(event.target.value);\n  };\n\n  const sortTemplate = (\n    <FormControl variant=\"outlined\">\n      <InputLabel htmlFor=\"sort-label\">Sort by</InputLabel>\n      <Select\n        native\n        value={state.sortCriterion}\n        onChange={handleChange}\n        label=\"Sort by\"\n        className=\"header-sort\"\n        inputProps={{\n          name: 'sort',\n          id: 'sort'\n        }}\n        data-testid=\"sort\"\n      >\n        <option value=\"popularity.desc\">Popularity</option>\n        <option value=\"vote_average.desc\">Vote average</option>\n        <option value=\"vote_count.desc\">Vote count</option>\n        <option value=\"revenue.desc\">Revenue</option>\n        <option value=\"release_date.desc\">Newest release date</option>\n        <option value=\"release_date.asc\">Oldest release date </option>\n        <option value=\"primary_release_date.desc\">Newest primary release date</option>\n        <option value=\"primary_release_date.asc\">Oldest primary release date</option>\n      </Select>\n    </FormControl>\n  );\n\n  return (\n    <AppBar color=\"inherit\" position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h6\">MOVIES</Typography>\n\n        <div className=\"header-input\">{sortTemplate}</div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nListHeader.propTypes = {\n  sortCriterion: PropTypes.string.isRequired,\n  onSelectChange: PropTypes.func.isRequired\n};\n\nexport default ListHeader;\n","let nextPage = 1;\n\nexport const concat = (newMovies, totalPages) => {\n  nextPage += 1;\n\n  return {\n    type: 'CONCAT',\n    newMovies,\n    nextPage,\n    totalPages\n  };\n};\n\nexport const reset = () => {\n  nextPage = 1;\n\n  return {\n    type: 'RESET'\n  };\n};\n\nexport const setSort = (sort) => {\n  return {\n    type: 'SET_SORT',\n    sort\n  };\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\n\nimport { MOVIES_LIST_URL, API_KEY } from '../../App.constants';\nimport axios from '../../utils/axios';\nimport MoviesList from '../../components/MoviesList/MoviesList';\nimport ListHeader from '../../components/ListHeader/ListHeader';\nimport { concat, reset, setSort } from '../../actions';\nimport './MoviesListPage.css';\n\nconst MoviesListPage = ({ dispatch, movies, nextPage, totalPages, sort }) => {\n  const loadingRef = useRef(false);\n  const [loading, setLoadingState] = useState(loadingRef.current);\n  const setLoading = (value) => {\n    loadingRef.current = value;\n    setLoadingState(loadingRef.current);\n  };\n\n  const getMovies = (next, newSortVal) => {\n    const urlNextPage = next || nextPage;\n    const urlSort = newSortVal || sort;\n    const url = `${MOVIES_LIST_URL}?api_key=${API_KEY}&page=${urlNextPage}&sort_by=${urlSort}`;\n\n    setLoading(true);\n\n    axios\n      .get(url)\n      .then((res) => {\n        dispatch(concat(res.data.results, res.data.total_pages));\n        setLoading(false);\n      })\n      .catch(() => {\n        dispatch(reset());\n        setLoading(false);\n      });\n  };\n\n  const handleScroll = (next, total) => {\n    const { clientHeight } = document.getElementById('list');\n    const { scrollTop } = document.getElementById('listContainer');\n    const bottomDistance = clientHeight - scrollTop - window.innerHeight + 64;\n    const thresdhold = window.innerHeight;\n\n    if (bottomDistance > thresdhold || loadingRef.current || next > total) return;\n\n    getMovies();\n  };\n\n  const initMovies = () => {\n    if (movies.length === 0) {\n      getMovies();\n    }\n  };\n\n  useEffect(initMovies, []);\n\n  const handleChange = (val) => {\n    dispatch(setSort(val));\n    dispatch(reset());\n    getMovies(1, val);\n  };\n\n  return (\n    <div\n      id=\"listContainer\"\n      className=\"list-container\"\n      onScroll={() => {\n        handleScroll(nextPage, totalPages);\n      }}\n    >\n      <ListHeader sortCriterion={sort} onSelectChange={handleChange} />\n      <MoviesList movies={movies} />\n      {loading && (\n        <div className=\"loading\">\n          <CircularProgress />\n        </div>\n      )}\n    </div>\n  );\n};\n\nMoviesListPage.propTypes = {\n  // eslint-disable-next-line\n  dispatch: PropTypes.any.isRequired,\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextPage: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  sort: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  movies: state.moviesInfo.movies,\n  nextPage: state.moviesInfo.nextPage,\n  totalPages: state.moviesInfo.totalPages,\n  sort: state.sort\n});\n\nexport default connect(mapStateToProps)(MoviesListPage);\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\nexport const DEFAULT_IMAGE_BASE_URL = '/assets/images/';\n\nexport const POSTER_SIZE = 'w500';\nexport const BACKDROP_SIZE = 'w1280';\nexport const DETAIL_POSTER_SIZE = 'w92';\n\nexport const MOVIES_LIST_URL = '/discover/movie';\nexport const MOVIE_URL = '/movie/';\n\nexport const API_KEY = '92b418e837b833be308bbfb1fb2aca1e';\n","import axios from 'axios';\nimport { BASE_URL } from '../App.constants';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL\n});\n\nexport default axiosInstance;\n"],"sourceRoot":""}